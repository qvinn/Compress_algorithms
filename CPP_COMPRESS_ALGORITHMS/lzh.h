#pragma once
#ifndef LZH_H
    #define LZH_H

    #include "main.h"

    #define N 4096                                  /* buffer size */
    #define F 60                                    /* lookahead buffer size */
    #define THRESHOLD 2
    #define NIL N                                   /* leaf of tree */
    #define N_CHAR (256 - THRESHOLD + F)            // = 314 /* kinds of characters (character code = 0..N_CHAR-1) */
    #define T (N_CHAR * 2 - 1)                      /* size of table = 627 */
    #define R (T - 1)                               /* position of root = 626 */
    #define MAX_FREQ 0x8000                         /* updates tree when the */
    #define EXIT_FAILED -1

    class LZH {
        public:
            LZH();
            ~LZH();
            FILE *infile;
            FILE *outfile; // входной и выходной файлы
//          unsigned int Encode(unsigned char *in, unsigned int inlen, unsigned char *out);
//          unsigned int Decode(unsigned char *in, unsigned char *out);
            void Encode(void);
            void Decode(void);
            void reset_vars();

        private:
            //unsigned char *input;
            //unsigned char *output;
            unsigned int textsize;// = 0;
            unsigned int codesize;// = 0;
            unsigned int printcount;// = 0;
            /*static*/ unsigned char text_buf[N + F - 1];
            unsigned short match_position;
            unsigned short match_length;
            unsigned short lson[N + 1];
            unsigned short rson[N + 257];
            unsigned short dad[N + 1];
            unsigned short freq[T + 1];                             /* frequency table */
            unsigned short prnt[T + N_CHAR];                        /* pointers to parent nodes, except for the */
            unsigned short son[T];                                  /* pointers to child nodes (son[], son[] + 1) */
            unsigned short getbuf;// = 0;
            unsigned char getlen;// = 0;
            unsigned int putbuf;// = 0;
            unsigned char putlen;// = 0;
            unsigned int code;
            unsigned int len;
            void Error(char *message);
            void InitTree(void);
            void InsertNode(int r);
            void DeleteNode(int p);
            unsigned short GetBit();
            unsigned short GetByte();
            void Putcode(int l, unsigned int c);
            void StartHuff(void);
            void reconst(void);
            void update(unsigned int c);
            void EncodeChar(unsigned c);
            void EncodePosition(unsigned c);
            void EncodeEnd(void);
            unsigned int DecodeChar();
            unsigned int DecodePosition();
            /*const*/ unsigned int DecodedLength(unsigned char *in);
            unsigned char p_len[64] = {                             /* for encoding */
                0x03, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05, 0x05,
                0x05, 0x05, 0x05, 0x05, 0x06, 0x06, 0x06, 0x06,
                0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
                0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
                0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
                0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
                0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
                0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08
            };
            unsigned char p_code[64] = {
                0x00, 0x20, 0x30, 0x40, 0x50, 0x58, 0x60, 0x68,
                0x70, 0x78, 0x80, 0x88, 0x90, 0x94, 0x98, 0x9C,
                0xA0, 0xA4, 0xA8, 0xAC, 0xB0, 0xB4, 0xB8, 0xBC,
                0xC0, 0xC2, 0xC4, 0xC6, 0xC8, 0xCA, 0xCC, 0xCE,
                0xD0, 0xD2, 0xD4, 0xD6, 0xD8, 0xDA, 0xDC, 0xDE,
                0xE0, 0xE2, 0xE4, 0xE6, 0xE8, 0xEA, 0xEC, 0xEE,
                0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
                0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF
            };
            unsigned char d_code[256] = {                           /* for decoding */
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
                0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
                0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
                0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
                0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
                0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
                0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
                0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
                0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
                0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
                0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A,
                0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D,
                0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F,
                0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11,
                0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 0x13,
                0x14, 0x14, 0x14, 0x14, 0x15, 0x15, 0x15, 0x15,
                0x16, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x17,
                0x18, 0x18, 0x19, 0x19, 0x1A, 0x1A, 0x1B, 0x1B,
                0x1C, 0x1C, 0x1D, 0x1D, 0x1E, 0x1E, 0x1F, 0x1F,
                0x20, 0x20, 0x21, 0x21, 0x22, 0x22, 0x23, 0x23,
                0x24, 0x24, 0x25, 0x25, 0x26, 0x26, 0x27, 0x27,
                0x28, 0x28, 0x29, 0x29, 0x2A, 0x2A, 0x2B, 0x2B,
                0x2C, 0x2C, 0x2D, 0x2D, 0x2E, 0x2E, 0x2F, 0x2F,
                0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
                0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
            };
            unsigned char d_len[256] = {
                0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
                0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
                0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
                0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
                0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
                0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
                0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
                0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
                0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
                0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
                0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
                0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
                0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
                0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
                0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
                0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
                0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
                0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
                0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
                0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
                0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
                0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
                0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
                0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
                0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
                0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
                0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
                0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
                0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
                0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
                0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
                0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
            };
    };

#endif // LZH_H
